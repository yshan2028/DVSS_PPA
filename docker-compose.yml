services:
  # Python FastAPI 后端
  backend-python:
    build:
      context: ./backend-python
      dockerfile: Dockerfile
    container_name: dvss-backend-python
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=mysql+pymysql://root:admin123@mysql:3306/dvss_db
      - MONGODB_URL=mongodb://root:admin123@mongo:27017
      - REDIS_HOST=redis
      - REDIS_PASSWORD=admin123
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=admin123
      - GO_BACKEND_URL=http://backend-go:8001
    volumes:
      - ./backend-python/logs:/app/logs
    depends_on:
      - mysql
      - mongo
      - redis
      - neo4j
    networks:
      - dvss-network
    restart: unless-stopped

  # Go Fabric 后端
  backend-go:
    build:
      context: ./backend-go
      dockerfile: Dockerfile
    container_name: dvss-go-backend
    ports:
      - "8001:8001"
    environment:
      - PYTHON_BACKEND_URL=http://backend-python:8000
      - ENVIRONMENT=docker
      - DATABASE_URL=root:admin123@tcp(mysql:3306)/dvss_db
    volumes:
      - ./backend-go/logs:/app/logs
      - ./fabric-config:/app/fabric-config
    depends_on:
      - mysql
    networks:
      - dvss-network
    restart: unless-stopped

  # Vue3 前端
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: dvss-frontend
    ports:
      - "3000:80"
    depends_on:
      - backend-python
      - backend-go
    networks:
      - dvss-network
    restart: unless-stopped

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: dvss-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - frontend
      - backend-python
      - backend-go
    networks:
      - dvss-network
    restart: unless-stopped

  # MySQL 数据库
  mysql:
    image: mysql:8.0
    container_name: dvss-mysql
    environment:
      MYSQL_ROOT_PASSWORD: admin123
      MYSQL_DATABASE: dvss_db
    volumes:
      - mysql_data:/var/lib/mysql
      - ./scripts/init-mysql.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "3306:3306"
    networks:
      - dvss-network
    restart: unless-stopped

  # MongoDB
  mongo:
    image: mongo:7.0
    container_name: dvss-mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: admin123
    volumes:
      - mongo_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - dvss-network
    restart: unless-stopped

  # Redis
  redis:
    image: redis:7-alpine
    container_name: dvss-redis
    command: redis-server --appendonly yes --requirepass admin123
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - dvss-network
    restart: unless-stopped

  # Neo4j
  neo4j:
    image: neo4j:5.14
    container_name: dvss-neo4j
    environment:
      NEO4J_AUTH: neo4j/admin123
      NEO4J_PLUGINS: '["apoc"]'
    volumes:
      - neo4j_data:/data
    ports:
      - "7474:7474"
      - "7687:7687"
    networks:
      - dvss-network
    restart: unless-stopped

  # Fabric CA (可选，使用 2.5 版本)
  fabric-ca:
    image: hyperledger/fabric-ca:2.5
    container_name: dvss-fabric-ca
    environment:
      FABRIC_CA_HOME: /etc/hyperledger/fabric-ca-server
      FABRIC_CA_SERVER_CA_NAME: ca-org1
      FABRIC_CA_SERVER_TLS_ENABLED: true
    volumes:
      - ./fabric-config/ca:/etc/hyperledger/fabric-ca-server
    ports:
      - "7054:7054"
    networks:
      - dvss-network
    restart: unless-stopped

  # Prometheus 监控
  prometheus:
    image: prom/prometheus:latest
    container_name: dvss-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - dvss-network
    restart: unless-stopped

  # Grafana 可视化
  grafana:
    image: grafana/grafana:latest
    container_name: dvss-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - dvss-network
    restart: unless-stopped

  # ETL 数据处理服务
  etl-service:
    build:
      context: ./etl
      dockerfile: Dockerfile
    container_name: dvss-etl
    working_dir: /app
    volumes:
      - ./etl:/app
      - ./etl/logs:/app/logs
    environment:
      - DATABASE_URL=mysql+pymysql://root:admin123@mysql:3306/dvss_db
      - MONGODB_URL=mongodb://root:admin123@mongo:27017
      - REDIS_HOST=redis
      - REDIS_PASSWORD=admin123
      - PYTHONPATH=/app
    depends_on:
      - mysql
      - mongo
      - redis
    ports:
      - "8002:8002"
    networks:
      - dvss-network
    restart: unless-stopped

volumes:
  mysql_data:
  mongo_data:
  redis_data:
  neo4j_data:
  prometheus_data:
  grafana_data:

networks:
  dvss-network:
    driver: bridge
